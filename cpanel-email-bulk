#!/bin/bash

# cPanel Bulk Email Password Reset Script
# Usage: ./cpanel_bulk_reset.sh [server] [username] [api_key]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Global variable for auth method
AUTH_METHOD="cpanel"

# Default values
DEFAULT_PORT=2083
CSV_FILE="email_password_reset_$(date +%Y%m%d_%H%M%S).csv"

# Function to print colored output
print_color() {
    local color=$1
    shift
    echo -e "${color}$@${NC}"
}

# Function to generate random password
generate_password() {
    local length=${1:-12}
    tr -dc 'A-Za-z0-9!@#$%^&*' < /dev/urandom | head -c $length
}

# Function to validate API connection
validate_api() {
    local server=$1
    local username=$2
    local api_key=$3
    
    print_color $BLUE "Validating API connection..."
    
    # Test cpanel auth method
    local response=$(curl -s -k -H "Authorization: cpanel $username:$api_key" \
        "https://$server/execute/Quota/get_quota_info" 2>&1)
    
    # Check if response contains valid JSON with status:1
    if [[ "$response" == *'"status":1'* ]] && [[ "$response" == *'"data"'* ]]; then
        AUTH_METHOD="cpanel"
        return 0
    fi
    
    # If first method fails, try basic auth
    print_color $YELLOW "Trying Basic Auth method..."
    local response2=$(curl -s -k -u "$username:$api_key" \
        "https://$server/execute/Quota/get_quota_info" 2>&1)
    
    if [[ "$response2" == *'"status":1'* ]] && [[ "$response2" == *'"data"'* ]]; then
        AUTH_METHOD="basic"
        return 0
    fi
    
    # Try UAPI token method
    print_color $YELLOW "Trying UAPI token method..."
    local response3=$(curl -s -k -H "Authorization: uapi-token $username:$api_key" \
        "https://$server/execute/Quota/get_quota_info" 2>&1)
    
    if [[ "$response3" == *'"status":1'* ]] && [[ "$response3" == *'"data"'* ]]; then
        AUTH_METHOD="uapi-token"
        return 0
    fi
    
    # All methods failed
    print_color $RED "All authentication methods failed:"
    print_color $CYAN "Method 1 (cpanel): $response"
    print_color $CYAN "Method 2 (basic): $response2" 
    print_color $CYAN "Method 3 (uapi-token): $response3"
    return 1
}

# Function to get all domains
get_domains() {
    local server=$1
    local username=$2
    local api_key=$3
    
    print_color $BLUE "Fetching domains..."
    
    local curl_cmd=""
    case $AUTH_METHOD in
        "basic")
            curl_cmd="curl -s -k -u \"$username:$api_key\""
            ;;
        "uapi-token")
            curl_cmd="curl -s -k -H \"Authorization: uapi-token $username:$api_key\""
            ;;
        *)
            curl_cmd="curl -s -k -H \"Authorization: cpanel $username:$api_key\""
            ;;
    esac
    
    local response=$(eval $curl_cmd "\"https://$server/execute/DomainInfo/domains_data\"")
    
    echo "$response" | grep -o '"domain":"[^"]*"' | sed 's/"domain":"//g' | sed 's/"//g' | sort -u
}

# Function to get email accounts for a domain
get_email_accounts() {
    local server=$1
    local username=$2
    local api_key=$3
    local domain=$4
    
    local curl_cmd=""
    case $AUTH_METHOD in
        "basic")
            curl_cmd="curl -s -k -u \"$username:$api_key\""
            ;;
        "uapi-token")
            curl_cmd="curl -s -k -H \"Authorization: uapi-token $username:$api_key\""
            ;;
        *)
            curl_cmd="curl -s -k -H \"Authorization: cpanel $username:$api_key\""
            ;;
    esac
    
    local response=$(eval $curl_cmd "\"https://$server/execute/Email/list_pops?domain=$domain\"")
    
    echo "$response" | grep -o '"user":"[^"]*"' | sed 's/"user":"//g' | sed 's/"//g'
}

# Function to reset email password
reset_email_password() {
    local server=$1
    local username=$2
    local api_key=$3
    local email_user=$4
    local domain=$5
    local new_password=$6
    
    local curl_cmd=""
    case $AUTH_METHOD in
        "basic")
            curl_cmd="curl -s -k -u \"$username:$api_key\""
            ;;
        "uapi-token")
            curl_cmd="curl -s -k -H \"Authorization: uapi-token $username:$api_key\""
            ;;
        *)
            curl_cmd="curl -s -k -H \"Authorization: cpanel $username:$api_key\""
            ;;
    esac
    
    local response=$(eval $curl_cmd \
        "-X POST \"https://$server/execute/Email/passwd_pop\" \
        -d \"email=${email_user}\" \
        -d \"domain=${domain}\" \
        -d \"password=${new_password}\"")
    
    if [[ "$response" == *'"status":1'* ]]; then
        return 0
    else
        print_color $RED "    Error response: $response"
        return 1
    fi
}

# Function for domain selection with arrow keys
select_domains() {
    local domains=($@)
    local selected=()
    local current=0
    local total=${#domains[@]}
    
    # Initialize all as excluded (0)
    local status=()
    for i in $(seq 0 $((total-1))); do
        status[i]=0
    done
    
    while true; do
        clear
        print_color $CYAN "=== Domain Selection ==="
        print_color $YELLOW "Use ↑/↓ to navigate, ←/→ to include/exclude, ENTER to confirm"
        echo
        
        for i in $(seq 0 $((total-1))); do
            local prefix=""
            local suffix=""
            
            if [[ $i -eq $current ]]; then
                prefix="${BLUE}> "
                suffix="${NC}"
            else
                prefix="  "
            fi
            
            if [[ ${status[i]} -eq 1 ]]; then
                echo -e "${prefix}${GREEN}[✓]${NC} ${domains[i]}${suffix}"
            else
                echo -e "${prefix}${RED}[✗]${NC} ${domains[i]}${suffix}"
            fi
        done
        
        echo
        print_color $YELLOW "Selected domains: $(echo ${status[@]} | tr ' ' '\n' | grep -c '1') / $total"
        
        # Read single character
        read -rsn1 key
        
        case $key in
            $'\x1b')  # ESC sequence
                read -rsn2 key
                case $key in
                    '[A') # Up arrow
                        ((current > 0)) && ((current--))
                        ;;
                    '[B') # Down arrow
                        ((current < total-1)) && ((current++))
                        ;;
                    '[C') # Right arrow - include
                        status[current]=1
                        ;;
                    '[D') # Left arrow - exclude
                        status[current]=0
                        ;;
                esac
                ;;
            '') # Enter
                break
                ;;
            ' ') # Space - toggle
                if [[ ${status[current]} -eq 1 ]]; then
                    status[current]=0
                else
                    status[current]=1
                fi
                ;;
        esac
    done
    
    # Return selected domains
    for i in $(seq 0 $((total-1))); do
        if [[ ${status[i]} -eq 1 ]]; then
            selected+=(${domains[i]})
        fi
    done
    
    echo "${selected[@]}"
}

# Main script
main() {
    print_color $GREEN "=== cPanel Bulk Email Password Reset ==="
    echo
    
    # Get server input
    if [[ -n "$1" ]]; then
        SERVER="$1"
    else
        read -p "Enter server domain/IP (with optional port, default: 2083): " SERVER
    fi
    
    # Add default port if not specified
    if [[ ! "$SERVER" =~ :[0-9]+$ ]]; then
        SERVER="$SERVER:$DEFAULT_PORT"
    fi
    
    # Get username
    if [[ -n "$2" ]]; then
        USERNAME="$2"
    else
        read -p "Enter cPanel username: " USERNAME
    fi
    
    # Get API key
    if [[ -n "$3" ]]; then
        API_KEY="$3"
    else
        read -s -p "Enter cPanel API key: " API_KEY
        echo
    fi
    
    # Validate API connection
    if ! validate_api "$SERVER" "$USERNAME" "$API_KEY"; then
        print_color $RED "❌ API validation failed! Please check your credentials."
        exit 1
    fi
    
    print_color $GREEN "✅ API connection validated successfully!"
    echo
    
    # Get domains
    DOMAINS=($(get_domains "$SERVER" "$USERNAME" "$API_KEY"))
    
    if [[ ${#DOMAINS[@]} -eq 0 ]]; then
        print_color $RED "❌ No domains found!"
        exit 1
    fi
    
    print_color $GREEN "Found ${#DOMAINS[@]} domains"
    echo
    
    # Select domains
    SELECTED_DOMAINS=($(select_domains "${DOMAINS[@]}"))
    
    if [[ ${#SELECTED_DOMAINS[@]} -eq 0 ]]; then
        print_color $YELLOW "No domains selected. Exiting."
        exit 0
    fi
    
    clear
    print_color $GREEN "Selected domains: ${SELECTED_DOMAINS[*]}"
    echo
    
    # Get new password preference
    read -p "Enter new password (leave empty for random passwords): " NEW_PASSWORD
    
    if [[ -z "$NEW_PASSWORD" ]]; then
        USE_RANDOM=true
        print_color $YELLOW "Will generate random passwords for each account"
    else
        USE_RANDOM=false
        print_color $YELLOW "Will use the same password for all accounts"
    fi
    
    echo
    
    # Initialize CSV file
    echo "Domain,Email,Old_Password_Status,New_Password,Reset_Status,Timestamp" > "$CSV_FILE"
    
    # Process each selected domain
    for domain in "${SELECTED_DOMAINS[@]}"; do
        print_color $CYAN "Processing domain: $domain"
        
        EMAIL_ACCOUNTS=($(get_email_accounts "$SERVER" "$USERNAME" "$API_KEY" "$domain"))
        
        if [[ ${#EMAIL_ACCOUNTS[@]} -eq 0 ]]; then
            print_color $YELLOW "  No email accounts found for $domain"
            continue
        fi
        
        for email_user in "${EMAIL_ACCOUNTS[@]}"; do
            if [[ "$USE_RANDOM" == true ]]; then
                PASSWORD=$(generate_password 12)
            else
                PASSWORD="$NEW_PASSWORD"
            fi
            
            print_color $BLUE "  Resetting password for: ${email_user}@${domain}"
            
            if reset_email_password "$SERVER" "$USERNAME" "$API_KEY" "$email_user" "$domain" "$PASSWORD"; then
                print_color $GREEN "    ✅ Success"
                echo "$domain,${email_user}@${domain},N/A,$PASSWORD,SUCCESS,$(date)" >> "$CSV_FILE"
            else
                print_color $RED "    ❌ Failed"
                echo "$domain,${email_user}@${domain},N/A,$PASSWORD,FAILED,$(date)" >> "$CSV_FILE"
            fi
        done
        
        echo
    done
    
    print_color $GREEN "=== Process Complete ==="
    print_color $CYAN "Results saved to: $CSV_FILE"
    
    # Show summary
    local success_count=$(grep -c "SUCCESS" "$CSV_FILE" || echo "0")
    local failed_count=$(grep -c "FAILED" "$CSV_FILE" || echo "0")
    
    echo
    print_color $GREEN "Summary:"
    print_color $GREEN "  Successful resets: $success_count"
    print_color $RED "  Failed resets: $failed_count"
    
    if [[ "$USE_RANDOM" == true ]]; then
        print_color $YELLOW "  Random passwords generated - check CSV file for details"
    fi
}

# Check dependencies
if ! command -v curl &> /dev/null; then
    print_color $RED "❌ curl is required but not installed."
    exit 1
fi

# Run main function
main "$@"